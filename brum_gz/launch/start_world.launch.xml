<launch>
  <arg name="world_sdf_file" default="brum_plain.sdf" description="Path to the SDF world file" />
  <let name="_default_world_name"
    value="$(eval '\'$(var world_sdf_file)\'.removesuffix(\'.sdf\').rsplit(\'/\', maxsplit=1)[-1]')" />
  <arg name="world_name" default="$(var _default_world_name)" />

  <!-- <log message="$(var world_name)"/> -->

  <arg name="use_composition" default="False" description="Use composed bringup if True" />
  <arg name="create_own_container" default="True"
    description="Whether we should start our own ROS container when using composition" />
  <arg name="container_name" default="ros_gz_container"
    description="Name of container that nodes will load in if use composition" />

  <gz_server
    world_sdf_file="$(var world_sdf_file)"
    use_composition="$(var use_composition)"
    create_own_container="$(var create_own_container)"
    container_name="$(var container_name)" />

  <ros_gz_bridge bridge_name="clock_bridge" container_name="$(var container_name)"
    create_own_container="False" use_composition="$(var use_composition)" use_respawn="True">
    <topic ros_topic_name="/clock" gz_topic_name="/clock"
      ros_type_name="rosgraph_msgs/msg/Clock"
      gz_type_name="gz.msgs.Clock"
      qos_profile="CLOCK"
      lazy="False" direction="GZ_TO_ROS" />
    <service service_name="/world/$(var world_name)/control"
      ros_type_name="ros_gz_interfaces/srv/ControlWorld" gz_req_type_name="gz.msgs.WorldControl"
      gz_rep_type_name="gz.msgs.Boolean" />
  </ros_gz_bridge>
</launch>
